name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
      - run: just test

  msrv:
    name: Test MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/install-action@v2
        with:
          tool: just
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
      - name: Read crate metadata
        id: metadata
        run: echo "rust-version=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.metadata.outputs.rust-version }}
          components: clippy,rustfmt
      - run: just test

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
#      fail-fast:3 true
      fail-fast: false
      matrix:
        include:
          - target: aarch64-apple-darwin
            file: libsqlite_compressions.dylib
            download: 'https://www.sqlite.org/2023/sqlite-tools-osx-x64-3440200.zip'
            os: macOS-latest
          - target: x86_64-apple-darwin
            file: libsqlite_compressions.dylib
            download: 'https://www.sqlite.org/2023/sqlite-tools-osx-x64-3440200.zip'
            os: macOS-latest
          - target: x86_64-pc-windows-msvc
            file: 'sqlite_compressions.dll'
            download: 'https://www.sqlite.org/2023/sqlite-tools-win-x64-3440200.zip'
            os: windows-latest
#          - target: aarch64-unknown-linux-gnu
#            file: libsqlite_compressions.so
#            os: ubuntu-latest
#            cross: true
          - target: x86_64-unknown-linux-gnu
            file: libsqlite_compressions.so
            os: ubuntu-latest
    steps:
      - uses: taiki-e/install-action@v2
        with:
          tool: just
#      - uses: actions/checkout@v4
#      - uses: Swatinem/rust-cache@v2
#        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
#      - name: Build
#        if: matrix.cross != 'true'
#        run: |
#          set -x
#          mkdir -p target_releases/${{ matrix.target }}
#          rustup target add "${{ matrix.target }}"
#          export RUSTFLAGS='-C strip=debuginfo'
#          just build-ext --release --target ${{ matrix.target }}
#          mv target/${{ matrix.target }}/release/examples/${{ matrix.file }} target_releases/${{ matrix.target }}
#      - name: Build cross
#        if: matrix.cross == 'true'
#        run: |
#          set -x
#          mkdir -p target_releases/${{ matrix.target }}
#          rustup target add "${{ matrix.target }}"
#          export RUSTFLAGS='-C strip=debuginfo'
#          just build-ext --release --target ${{ matrix.target }}
#          mv target/${{ matrix.target }}/release/examples/${{ matrix.file }} target_releases/${{ matrix.target }}
      - name: Download SQLite
        if: matrix.download
        uses: carlosperate/download-file-action@v2
        with:
          file-url: '${{ matrix.download }}'
          name: sqlite.zip
      - name: Install SQLite
        if: matrix.download
        run: |
          ls -Rl
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z x sqlite.zip
          else
            unzip sqlite.zip
            ls
            chmod +x sqlite3
          fi
          ls -Rl
          which sqlite3
          sqlite3 --version
          sqlite3 <<EOF
          .help
          EOF

      - name: Install SQLite
        if: matrix.os == 'macOS-latest'
#        if: matrix.target == 'x86_64-apple-darwin'
        run: |
          brew reinstall sqlite
          which sqlite3
          sqlite3 --version
          sqlite3 <<EOF
          .help
          EOF
      - name: SQLite Info
        run: |
          which sqlite3
          sqlite3 --version
          sqlite3 <<EOF
          .help
          EOF
      - name: Test ${{ matrix.target }} extension
        run: just extension_file=target_releases/${{ matrix.target }}/${{ matrix.file }} test-ext
      - name: Save build artifacts to build-${{ matrix.target }}
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: target_releases/${{ matrix.target }}/*




#      - uses: taiki-e/install-action@v2
#        with:
#          tool: cargo-deb
#      - name: Build Debian package (.deb)
#        run: |
#          set -x
#          cargo deb -v --output target/debian/debian-x86_64.deb
#          mkdir -p target_releases
#          mv target/debian/debian-x86_64.deb target_releases/
